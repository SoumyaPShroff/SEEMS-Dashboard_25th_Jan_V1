{"version":3,"sources":["app/views/sessions/JwtRegister.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","JwtRegister","theme","useTheme","register","useAuth","navigate","useNavigate","useState","loading","setLoading","className","container","item","sm","xs","width","alt","src","p","onSubmit","values","e","console","log","errors","touched","handleChange","handleBlur","handleSubmit","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","gap","checked","fontSize","color","mt","to","style","palette","primary","main","marginLeft"],"mappings":"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","file":"static/js/37.3a8ce8d4.chunk.js","sourcesContent":["import { useTheme } from '@emotion/react';\nimport { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\nimport { Box, styled } from '@mui/system';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(JustifyBox)(() => ({\n  height: '100%',\n  padding: '32px',\n  background: 'rgba(0, 0, 0, 0.01)',\n}));\n\nconst JWTRegister = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100vh !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: '',\n  password: '',\n  username: '',\n  remember: true,\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n});\n\nconst JwtRegister = () => {\n  const theme = useTheme();\n  const { register } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const handleFormSubmit = (values) => {\n    setLoading(true);\n\n    try {\n      register(values.email, values.username, values.password);\n      navigate('/');\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <JWTRegister>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <ContentBox>\n              <img\n                width=\"100%\"\n                alt=\"Register\"\n                src=\"/assets/images/illustrations/posting_photo.svg\"\n              />\n            </ContentBox>\n          </Grid>\n\n          <Grid item sm={6} xs={12}>\n            <Box p={4} height=\"100%\">\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"text\"\n                      name=\"username\"\n                      label=\"Username\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.username}\n                      onChange={handleChange}\n                      helperText={touched.username && errors.username}\n                      error={Boolean(errors.username && touched.username)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 2 }}\n                    />\n\n                    <FlexBox gap={1} alignItems=\"center\">\n                      <Checkbox\n                        size=\"small\"\n                        name=\"remember\"\n                        onChange={handleChange}\n                        checked={values.remember}\n                        sx={{ padding: 0 }}\n                      />\n\n                      <Paragraph fontSize={13}>\n                        I have read and agree to the terms of service.\n                      </Paragraph>\n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ mb: 2, mt: 3 }}\n                    >\n                      Regiser\n                    </LoadingButton>\n\n                    <Paragraph>\n                      Already have an account?\n                      <NavLink\n                        to=\"/session/signin\"\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n                      >\n                        Login\n                      </NavLink>\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRegister>\n  );\n};\n\nexport default JwtRegister;\n"],"sourceRoot":""}